---
format: html
---

```{r, echo=FALSE, message=FALSE}
library(sf)
load("data.rda") 
obs <- sp_pro |> 
  dplyr::filter(code_ref == <%=cd_ref%>)
```

<% { 
names <- taxref4R::get_taxa(cd_ref)

french_name <- names$frenchVernacularName

if (!is.na(french_name)) { french_name <- french_name |> stringr::str_split_1(pattern = "\\,")

name <- french_name[1] |> stringr::str_remove_all(pattern = "\\(.*?\\)") } else { name <-"" }

photo_url <- taxref4R::get_taxa_photo(cd_ref)

statuts <- statuts |> dplyr::filter(referenceId == cd_ref)

liste_rouge <- statuts |> dplyr::filter( statusTypeGroup == "Liste rouge", locationName %in% c("France métropolitaine", "Ile-de-France") ) |> dplyr::mutate( etat = dplyr::case_when( stringr::str_detect(statusRemarks, "Nicheur") ~ "Nicheur", stringr::str_detect(statusRemarks, "Hivernant") ~ "Hivernant", stringr::str_detect(statusRemarks, "Visiteur") ~ "Visiteur", TRUE ~ NA_character_ ), statut = ifelse(!is.na(statusCode), paste0('[', statusName, ']{style="background-color: ', couleurs_uicn[statusCode], '; color: ', couleurs_uicn_font[statusCode], ';"}'), NA) ) |> dplyr::mutate(synthese = paste0(statusTypeName, ifelse(is.na(etat), "", paste0(" (", etat,")")),": ", statut)) |> dplyr::pull(synthese) |> paste(collapse ="<br>")

protection <- statuts |> dplyr::filter( statusTypeGroup == "Protection", locationName %in% c("France métropolitaine", "Ile-de-France") ) |> dplyr::pull(statusName)

} %>

<b><%=stringr::str_to_upper(paste(
  ifelse(!is.na(names$vernacularGroup2), paste0(names$vernacularGroup2, " > ")),
  ifelse(!is.na(names$orderName), paste0(names$orderName, " > "), ""),
  names$familyName
))%></b>
<h1><%=names$referenceNameHtml%></h1>

<b><%= name %> (CD_NOM <%=cd_ref%>)</b>

<%=ifelse(!is.na(photo_url), paste0('<a href="', paste0("https://inpn.mnhn.fr/espece/cd_nom/", cd_ref, "/tab/fiche"),'"><img src="', photo_url, '" style="display: flex; max-width: 100%; max-height: 450px;"/></a>'), "

<div>

</div>

")%>

<h2>Statut de protection</h2>

<%=protection%>

<h2>Statut de conservation</h2>

<%=liste_rouge%>

<h2>Observations dans le SINP</h2>

<h3>Distribution spatiale</h3>

```{r, include=FALSE}
leaflet::leaflet() |> 
  leaflet::addTiles()
```


<div class="cell">

  <div class="cell-output-display">
  
  <div class="leaflet html-widget html-fill-item" id="htmlwidget-39265a46cb2e687622d6" style="width:100%;height:464px;"></div>
  
  <script>
  // Initialisation de la carte Leaflet
    var map = L.map('htmlwidget-39265a46cb2e687622d6').setView([48.8566, 2.3522], 8); // Coordonnées centrées sur l'Île-de-France
    
  // Ajout des tuiles OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://openstreetmap.org/copyright/">OpenStreetMap</a>, <a href="https://opendatacommons.org/licenses/odbl/">ODbL</a>',
      maxZoom: 18
    }).addTo(map);
    
      // Chargement du fichier GeoJSON avec les limites de l'Île-de-France
    fetch('limites_idf.geojson') // Remplacez par le bon chemin d'accès
      .then(response => response.json())
      .then(data => {
          // Appliquer le style aux polygones
          L.geoJSON(data, {
              style: function(feature) {
                  return {
                      color: "black", // Couleur des bordures
                      weight: 1,      // Épaisseur des bordures
                      fillColor: null, // Pas de couleur de remplissage
                      fillOpacity: 0   // Opacité de remplissage à 0 pour être transparent
                  };
              }
          }).addTo(map);
          // Ajuster la vue de la carte pour couvrir tous les polygones
          map.fitBounds(geojsonLayer.getBounds());
      })
      .catch(error => console.error('Erreur lors du chargement des limites de l\'Île-de-France :', error));
      
    fetch('obs_<%=cd_ref%>.geojson')
    .then(response => response.json())
    .then(data => {
      // Ajouter les points filtrés à la carte avec un style de point
      L.geoJSON(data, {
        pointToLayer: function(feature, latlng) {
          var marker = L.circleMarker(latlng, {
            radius: 5,         // Taille du marqueur
            color: "blue",     // Couleur de bordure
            fillColor: "blue", // Couleur de remplissage
            fillOpacity: 0.8   // Opacité du remplissage
          });
          
          // Ajouter infobulle au survol
          marker.bindTooltip(feature.properties.date);
          
          // Ajouter une popup au clic
          marker.bindPopup(feature.properties.label);
          
          return marker;
        }
      }).addTo(map);
    })
    .catch(error => console.error("Erreur lors du chargement des points : ", error));
    
  </script>
    
  </div>
  
</div>

<a href="https://inpn.mnhn.fr/espece/cd_nom/<%=cd_ref%>/tab/carte" target="_blank" title="Observations de l'espèces das l'INPN"><img src="logo_inpn.png" height="25"/></a> <a href="https://geonature.arb-idf.fr/atlas/espece/<%=cd_ref%>" target="_blank" title="Observations de l'espèce dans Géonat'IdF"><img src="logo_geonatidf.png" height="25"/></a>

<h3>

Temporalité des observations

</h2>

```{r, echo=FALSE}
chronique_annees <- obs |> 
  sf::st_drop_geometry() |> 
  dplyr::mutate(annee = lubridate::year(date)) |> 
  dplyr::count(annee) |> 
  dplyr::rename(
    `Nombre d'observations` = n,
    Année = annee
  ) |> 
  ggplot2::ggplot() +
  ggplot2::geom_col(
    mapping = ggplot2::aes(
      x = Année,
      y = `Nombre d'observations`
    )
  ) +
  templatesOFB::theme_ofb() +
  ggplot2::theme(
    axis.title.y = ggplot2::element_text(hjust = 1)
  )

plotly::ggplotly(chronique_annees)
```

```{r, echo=FALSE}
chronique_mois <- obs |> 
  sf::st_drop_geometry() |> 
  dplyr::mutate(
    mois = lubridate::month(date),
    stade_vie = dplyr::case_when(
      is.na(stade_vie) ~ "Non renseigné",
      stade_vie %in% c("Inconnu", "Indéterminé") ~ "Non renseigné",
      stade_vie %in% c("Alevin", "Chenille", "Immature", "Juvénile", "Larve", "Poussin") ~ "Juvénile",
      stade_vie %in% c("Emergent", "Imago", "Adulte") ~ "Adulte",
      stade_vie %in% c("Exuvie", "Mue") ~ "Exuvie/Mue",
      TRUE ~ stade_vie
    ) |> 
      factor(levels = c("Œuf", "Juvénile", "E1", "H1", "E2", "H2", "E3", "H3", "E4", "H4", "E5", "H5", "Adulte", "Non renseigné")) |> 
      forcats::fct_rev()
    ) |>
  dplyr::count(mois, stade_vie) |> 
  dplyr::rename(
    `Nombre d'observations` = n,
    Mois = mois,
    `Stade de vie` = stade_vie
  ) |> 
  ggplot2::ggplot() +
  ggplot2::geom_col(
    mapping = ggplot2::aes(
      x = Mois,
      y = `Nombre d'observations`,
      fill = `Stade de vie`
    )
  ) +
  ggplot2::scale_fill_ordinal() +
  ggplot2::scale_x_continuous(
    breaks = seq(12),
    limits = c(1, 12)
  ) +
  templatesOFB::theme_ofb() +
  ggplot2::theme(
    axis.title.y = ggplot2::element_text(hjust = 1)
  )

plotly::ggplotly(chronique_mois)
```

<a href="https://inpn.mnhn.fr/espece/cd_nom/<%=cd_ref%> /tab/valorisation?lg=fr" target="_blank"><img src="logo_inpn.png" title="Synthèse nationale sur l&apos;INPN" height="25"/></a>

<h2>Habitats</h2>

```{r, echo=FALSE}
habitats |> 
  dplyr::filter(code_ref == <%=cd_ref%>) |> 
  dplyr::select(Typologie, `Code de l'habitat`, `Nom de l'habitat`, `Relation avec l'habitat`, Condition, Remarque) |> 
  DT::datatable()
```
